#!/bin/bash

# -----------------------------------------------------------------------------
# Script Name: docker-tmux-setup.sh
#
# Description:
#   This script automates the setup of a local Docker development environment
#   within a tmux session. It splits the tmux window into multiple panes, each
#   running specific commands to streamline the development workflow. The script
#   supports an optional Vite development server pane for frontend builds.
#
# Features:
#   - Initializes Docker Compose with a specified service (defaults to runserver).
#   - Optionally includes a Vite development server pane.
#   - Provides an interactive shell to the specified service container with a pre-activated Python virtual environment.
#   - Finds the internal port of the Docker service automatically from the Docker Compose file.
#   - Opens the user-specified command-line editor in the left pane for code editing.
#
# Usage:
#   ./docker-tmux-setup.sh [OPTIONS]
#
# Options:
#   -b, --build      Rebuild the Docker images"
#   -e, --editor     Specify the editor to use (default: \$EDITOR)"
#   -h, --help       Display this help message"
#   -i, --infra      Specify Haltu infra version"
#   -s, --service    Specify the Docker service name (default: runserver)"
#   -v, --vite       Include Vite development server pane"
#
# Requirements:
#   - tmux must be installed and running.
#   - Docker and Docker Compose must be installed.
#   - The script should be executed within an existing tmux session.
#
# Examples:
#   # Use default service name without Vite pane
#   ./docker-tmux-setup.sh
#
#   # Specify a custom service name
#   ./docker-tmux-setup.sh --service myservice
#
#   # Specify a custom editor (e.g., vim)
#   ./docker-tmux-setup.sh --editor vim
#
#   # Include the Vite development server pane
#   ./docker-tmux-setup.sh --vite
#
#   # Combine options
#   ./docker-tmux-setup.sh -s myservice -v -e vim
#
# -----------------------------------------------------------------------------

# Usage function to display help
usage() {
    echo "Usage: $0 [-s service_name] [--vite|-v]"
    echo
    echo "Options:"
    echo "  -b, --build      Rebuild the Docker images"
    echo "  -e, --editor     Specify the editor to use (default: \$EDITOR)"
    echo "  -h, --help       Display this help message"
    echo "  -i, --infra      Specify Haltu infra version"
    echo "  -s, --service    Specify the Docker service name (default: runserver)"
    echo "  -v, --vite       Include Vite development server pane"
    exit 1
}

# Default values
BUILD_CONTAINERS=false
EDITOR_CMD="${EDITOR:-}"
INCLUDE_VITE=false
INFRA_VERSION="lilium"
SERVICE_NAME="runserver"

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do # $# expands to the number of positional arguments
    case $1 in
        -b|--build)
            BUILD_CONTAINERS=true
            ;;
        -e|--editor)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                EDITOR_CMD="$2"
                shift
            else
                echo "Error: --editor requires a non-empty option argument."
                exit 1
            fi
            ;;
        -h|--help)
            usage
            ;;
        -i|--infra)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                INFRA_VERSION="$2"
                shift
            else
                echo "Error: --infra requires a non-empty option argument."
                exit 1
            fi
            ;;
        -s|--service)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                SERVICE_NAME="$2"
                shift
            else
                echo "Error: --service requires a non-empty option argument."
                exit 1
            fi
            ;;
        -v|--vite)
            INCLUDE_VITE=true
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
    shift
done

# Validate the specified editor
validate_editor() {
    if [[ -z "$EDITOR_CMD" ]]; then
        echo "Error: No editor specified. Please provide an editor using -e or --editor, or set the \$EDITOR environment variable."
        exit 1
    elif ! command -v "$EDITOR_CMD" &>/dev/null; then
        echo "Error: Specified editor '$EDITOR_CMD' is not installed or not in PATH."
        exit 1
    fi
}
validate_editor

# Ensure TMUX is running
if [ -z "$TMUX" ]; then
    echo "This script must be run inside a tmux session."
    exit 1
fi

tmux split-window -h

# Pull newest Haltu Kehys image
pull_command=""
if [ "$BUILD_CONTAINERS" = true ]; then
    pull_command="docker pull docker.haltu.net/haltu/env/$INFRA_VERSION:develop && "
fi

# Create the proper infra-specific local_settings files
local_settings_command=""
if [ "$BUILD_CONTAINERS" = true ]; then
    local_settings_command="docker compose run $SERVICE_NAME bash -c 'cp -n ../local_settings.py local_settings_$INFRA_VERSION.py; cp -n local_settings.py.tpl_dev local_settings.py' && "
fi

# Run the containers
up_command="docker compose up"
if [ "$BUILD_CONTAINERS" = true ]; then
    up_command+=" --build"
fi
# Remove orphaned containers if any, orphaned containers may be left behind when configuration names change
up_command+=" --remove-orphans"

# Build the full command
full_command="${pull_command}${local_settings_command}${up_command}"

# Send the full command to tmux
tmux send-keys "$full_command" C-m

# Determine the Docker Compose file path
COMPOSE_FILE="docker-compose.yml"
if [ ! -f "$COMPOSE_FILE" ]; then
    echo "Error: $COMPOSE_FILE not found in the current directory."
    exit 1
fi

# Initialize variable for the container's internal port for health checks
CONTAINER_HEALTH_PORT=""

# Try to get from the first 'ports' mapping (e.g., "8080:80" -> 80, or "80" -> 80)
# '.[length-1]' correctly handles both "HOST:CONTAINER" and "CONTAINER" formats.
# We explicitly check for empty or "null" output from yq
TEMP_PORT_FROM_PORTS=$(yq e ".services.\"${SERVICE_NAME}\".ports[0] | split(\":\") | .[length-1]" "$COMPOSE_FILE" 2>/dev/null)
if [[ -n "$TEMP_PORT_FROM_PORTS" && "$TEMP_PORT_FROM_PORTS" != "null" ]]; then
    CONTAINER_HEALTH_PORT="$TEMP_PORT_FROM_PORTS"
fi

# If not found in 'ports', try the first 'expose' entry
if [[ -z "$CONTAINER_HEALTH_PORT" ]]; then
    TEMP_PORT_FROM_EXPOSE=$(yq e ".services.\"${SERVICE_NAME}\".expose[0]" "$COMPOSE_FILE" 2>/dev/null)
    if [[ -n "$TEMP_PORT_FROM_EXPOSE" && "$TEMP_PORT_FROM_EXPOSE" != "null" ]]; then
        CONTAINER_HEALTH_PORT="$TEMP_PORT_FROM_EXPOSE"
    fi
fi

# Common service ports as fallbacks
if [[ -z "$CONTAINER_HEALTH_PORT" ]]; then
    case "$SERVICE_NAME" in
        db|postgres|postgresql)
            CONTAINER_HEALTH_PORT="5432"
            echo "Info: '$SERVICE_NAME' service internal port not found in compose file. Defaulting to PostgreSQL port 5432."
            ;;
        # TODO: Add other common services if needed
        *)
            echo "Warning: Could not determine internal container port for service '$SERVICE_NAME' from $COMPOSE_FILE."
            echo "Defaulting internal health check port to 8000. Ensure this is correct for your service."
            CONTAINER_HEALTH_PORT="8000"
            ;;
    esac
fi

# Function to wait for a container to be ready
# It now correctly accepts service name and the *internal* container port as arguments
wait_for_container() {
    local service="$1"
    local container_internal_port="$2"

    local host_port=""
    echo "Attempting to find host port mapping for service '$service' (internal port $container_internal_port)..."

    while [[ -z "$host_port" ]]; do
        host_port=$(docker compose port "$service" "$container_internal_port" 2>/dev/null | cut -d ':' -f 2)
        if [[ -z "$host_port" ]]; then
            sleep 1
        fi
    done

    echo "Service $service (internal port $container_internal_port) is mapped to host port $host_port"
    echo "Waiting for $service container to be ready on localhost:$host_port"

    case "$service" in
        db|postgres|postgresql)
            echo "Performing PostgreSQL health check using pg_isready..."
            # Add -U postgres (or your configured PG user) to the pg_isready command
            until docker compose exec -T "$service" pg_isready -h localhost -p "$container_internal_port" -U postgres > /dev/null 2>&1; do
                echo "PostgreSQL not ready yet on port $container_internal_port, waiting..."
                sleep 1 # Databases can take a bit longer to start
            done
            ;;
        # TODO: Add other common services with specific health checks if needed
        *)
            # Default for HTTP-based services
            echo "Performing HTTP health check using curl..."
            until docker compose exec -T "$service" curl -sf "http://localhost:$container_internal_port/" > /dev/null 2>&1; do
                echo "Service $service not ready yet, waiting..."
                sleep 1
            done
            ;;
    esac
    echo "$service on host port $host_port is ready!"
}

# Wait for the container to be ready, passing the correct variables
wait_for_container "$SERVICE_NAME" "$CONTAINER_HEALTH_PORT"

if [ "$INCLUDE_VITE" = true ]; then
    # Vite dev server
    vite_pane=$(tmux split-window -v -P)
    tmux send-keys "docker compose exec $SERVICE_NAME bash" C-m
    tmux send-keys "npm start" C-m
fi

# Interactive shell to the container
tmux split-window -v
tmux send-keys "docker compose exec $SERVICE_NAME bash" C-m
tmux send-keys "source ../.venv/bin/activate" C-m
tmux send-keys "clear" C-m

# Resize panes on the right
window_height=$(tmux display -p "#{window_height}")

if [ "$INCLUDE_VITE" = true ]; then
    # Calculate height for 3 panes
    new_height=$((window_height / 3))

    # Resize the Vite pane
    tmux resize-pane -t "$vite_pane" -y "$new_height"

    # Select the pane below and resize
    tmux select-pane -D
    tmux resize-pane -y "$new_height"

    # Select the next pane below and resize
    tmux select-pane -D
    tmux resize-pane -y "$new_height"
else
    # Calculate height for 2 panes
    new_height=$((window_height / 2))

    # Resize the existing pane
    tmux resize-pane -y "$new_height"

    # Select the pane below and resize
    tmux select-pane -D
    tmux resize-pane -y "$new_height"
fi

# Nvim in the left half
tmux select-pane -L
tmux send-keys "$EDITOR_CMD ." C-m
